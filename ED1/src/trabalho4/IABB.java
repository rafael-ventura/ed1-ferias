package trabalho4;

/**
 * Define as opera√ß√µes b√°sicas da estrutura de dados √?RVORE BIN√?RIA DE BUSCA
 *
 * @param <T> Tipo a ser armazenado na √°rvore
 */
public interface IABB<T> {
	
	/**
	 * Insere o elemento e na √°rvore.
	 * 
	 * @param e Elemento a ser inserido.
	 */
	public void inserir(T e);
	
	/**
	 * Remove o elemento e da √°rvore.
	 * 
	 * @param e Elemento a ser removido.
	 */
	public void remover(T e);
	
	/**
	 * Percorre os elementos da √°rvore em ordem, imprimindo cada um.
	 */
	public void emOrdem();
	
	/**
	 * Percorre os elementos da √°rvore em pr√©-ordem, imprimindo cada um.
	 */
	public void preOrdem();
	
	/**
	 * Percorre os elementos da √°rvore em p√≥s-ordem, imprimindo cada um.
	 */
	public void posOrdem();
	
	/**
	 * Verifica se a √°rvore cont√©m o elemento e.
	 * 
	 * @param e Elemento a ser buscado.
	 * @return Verdadeiro se a √°rvore cont√©m o elemento e; falso, caso contr√°rio.
	 */
	public boolean contem(T e);
	
	/**
	 * Retorna a quantidade de elementos da √°rvore.
	 * 
	 * @return Quantidade de elementos da √°rvore.
	 */
	public int quantidade();
	
	/**
	 * Verifica se a √°rvore est√° vazia.
	 * 
	 * @return Verdadeiro se a √°rvore est√° vazia; falso se tem algum elemento.
	 */
	public boolean estaVazia();
	
	/**
	 * Remove todos os elementos da √°rvore.
	 */
	public void removerTodos();

	/**
	 * Calcula a altura da √°rvore.
	 * 
	 * @return Altura da √°rvore.
	 */
	public int altura();
	
	/**
	 * Calcula o n√∫mero de folhas da √°rvore.
	 * 
	 * @return N√∫mero de folhas da √°rvore.
	 */
	public int nrFolhas();
	
	/**
	 * Calcula o menor elemento da √°rvore.
	 * 
	 * @return Menor elemento da √°rvore.
	 */
	public T menor();
	
	/**
	 * Calcula o maior elemento da √°rvore.
	 * 
	 * @return Maior elemento da √°rvore.
	 */
	public T maior();
	
	/**
	 * Calcula a posi√ß√£o do elemento e.
	 * 
	 * @param e Elemento a ser procurado.
	 * @return Posi√ß√£o do elemento e; ou -1, se e n√£o existir.
	 */
	public int posicao(T e);

	/**
	 * Retorna o elemento da posi√ß√£o p.
	 * 
	 * @param p Posi√ß√£o do elemento
	 * @return Elemento da posi√ß√£o p; ou null, se p √© inv√°lido.
	 */
	public T getItem(int p);

	/**
	 * Imprime a √°rvore de forma decrescente.
	 */
	public void imprimirDecrescente();

	/**
	 * Verifica se a √°rvore √© estritamente bin√°ria.
	 * 
	 * @return Verdadeiro, se a √°rvore √© estritamente bin√°ria; falso, caso contr√°rio.
	 */
	public boolean ehEstritamenteBinaria();

	/**
	 * Verifica se a √°rvore √© completa.
	 * 
	 * @return Verdadeiro, se a √°rvore √© completa; falso, caso contr√°rio.
	 */
	public boolean ehCompleta();

	/**
	 * Verifica se a √°rvore √© cheia.
	 * 
	 * @return Verdadeiro, se a √°rvore √© cheia; falso, caso contr√°rio.
	 */
	public boolean ehCheia();

	/**
	 * Imprime o fator de balanceamento de todos os n√≥s internos da √°rvore. 
	 * Fator de balanceamento de um n√≥ k √© a diferen√ßa absoluta entre as alturas 
	 * das sub√°rvores esquerda e direita de k.
	 */
	public void fatorBalanceamento();
}
